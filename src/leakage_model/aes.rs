//! AES operations implementations to define leakage models.
//!
//! Functions in this module are basic unprotected implementations following [FIPS197](https://nvlpubs.nist.gov/nistpubs/fips/nist.fips.197.pdf).

/// AES S-Box
pub const SBOX: [u8; 256] = [
    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16,
];

/// AES inverse S-Box.
pub const INV_SBOX: [u8; 256] = [
    0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
    0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
    0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
    0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
    0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
    0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
    0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
    0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
    0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
    0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
    0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
    0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
    0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
    0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
    0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D,
];

/// Substitute one byte.
pub fn sbox(index: u8) -> u8 {
    SBOX[index as usize]
}

pub fn inv_sbox(index: u8) -> u8 {
    INV_SBOX[index as usize]
}

/// Expand a 128-bit AES key into round keys.
pub fn expand_key(key: &[u8; 16], round_keys: &mut [[u8; 16]; 11]) {
    const RCON: [u8; 10] = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];

    round_keys[0].copy_from_slice(key);

    for round in 1..11 {
        for num_word in 0..4 {
            if num_word == 0 {
                for i in 0..4 {
                    round_keys[round][i] = round_keys[round - 1][12 + i];
                }

                // RotWord and SubWord
                let tmp = round_keys[round][0];
                round_keys[round][0] = SBOX[round_keys[round][1] as usize];
                round_keys[round][1] = SBOX[round_keys[round][2] as usize];
                round_keys[round][2] = SBOX[round_keys[round][3] as usize];
                round_keys[round][3] = SBOX[tmp as usize];

                round_keys[round][0] ^= RCON[round - 1];
            } else {
                for i in 0..4 {
                    round_keys[round][num_word * 4 + i] = round_keys[round][(num_word - 1) * 4 + i];
                }
            }

            for i in 0..4 {
                round_keys[round][num_word * 4 + i] ^= round_keys[round - 1][num_word * 4 + i];
            }
        }
    }
}

/// The state is encoded in column major order.
pub fn add_round_key(state: &mut [u8; 16], round_key: &[u8; 16]) {
    for i in 0..16 {
        state[i] ^= round_key[i];
    }
}

/// The state is encoded in column major order.
pub fn sub_bytes(state: &mut [u8; 16]) {
    for i in 0..16 {
        state[i] = SBOX[state[i] as usize];
    }
}

/// The state is encoded in column major order.
pub fn shift_rows(state: &mut [u8; 16]) {
    // Shift second row
    let tmp = state[1];
    state[1] = state[5];
    state[5] = state[9];
    state[9] = state[13];
    state[13] = tmp;

    // Shift third row
    state.swap(2, 10);
    state.swap(6, 14);

    // Shift fourth row
    let tmp = state[15];
    state[15] = state[11];
    state[11] = state[7];
    state[7] = state[3];
    state[3] = tmp;
}

fn xtime(x: u8) -> u8 {
    (x << 1) ^ (((x >> 7) & 1) * 0x1b)
}

/// The state is encoded in column major order.
pub fn mix_columns(state: &mut [u8; 16]) {
    let mut new_col = [0; 4];
    for y in 0..4 {
        new_col[0] = xtime(state[y * 4])
            ^ (xtime(state[y * 4 + 1]) ^ state[y * 4 + 1])
            ^ state[y * 4 + 2]
            ^ state[y * 4 + 3];
        new_col[1] = state[y * 4]
            ^ xtime(state[y * 4 + 1])
            ^ (xtime(state[y * 4 + 2]) ^ state[y * 4 + 2])
            ^ state[y * 4 + 3];
        new_col[2] = state[y * 4]
            ^ state[y * 4 + 1]
            ^ xtime(state[y * 4 + 2])
            ^ (xtime(state[y * 4 + 3]) ^ state[y * 4 + 3]);
        new_col[3] = (xtime(state[y * 4]) ^ state[y * 4])
            ^ state[y * 4 + 1]
            ^ state[y * 4 + 2]
            ^ xtime(state[y * 4 + 3]);
        state[y * 4..(y + 1) * 4].copy_from_slice(&new_col);
    }
}

/// The state is encoded in column major order.
pub fn inv_sub_bytes(state: &mut [u8; 16]) {
    for i in 0..16 {
        state[i] = INV_SBOX[state[i] as usize];
    }
}

/// The state is encoded in column major order.
pub fn inv_shift_rows(state: &mut [u8; 16]) {
    // Shift second row
    let tmp = state[13];
    state[13] = state[9];
    state[9] = state[5];
    state[5] = state[1];
    state[1] = tmp;

    // Shift third row
    state.swap(2, 10);
    state.swap(6, 14);

    // Shift fourth row
    let tmp = state[3];
    state[3] = state[7];
    state[7] = state[11];
    state[11] = state[15];
    state[15] = tmp;
}

fn multiply(a: u8, x: u8) -> u8 {
    assert!(x < 16);

    ((x & 1) * a)
        ^ (((x >> 1) & 1) * xtime(a))
        ^ (((x >> 2) & 1) * xtime(xtime(a)))
        ^ (((x >> 3) & 1) * xtime(xtime(xtime(a))))
}

/// The state is encoded in column major order.
pub fn inv_mix_columns(state: &mut [u8; 16]) {
    let mut new_col = [0; 4];
    for y in 0..4 {
        new_col[0] = multiply(state[y * 4], 0x0e)
            ^ multiply(state[y * 4 + 1], 0x0b)
            ^ multiply(state[y * 4 + 2], 0x0d)
            ^ multiply(state[y * 4 + 3], 0x09);
        new_col[1] = multiply(state[y * 4], 0x09)
            ^ multiply(state[y * 4 + 1], 0x0e)
            ^ multiply(state[y * 4 + 2], 0x0b)
            ^ multiply(state[y * 4 + 3], 0x0d);
        new_col[2] = multiply(state[y * 4], 0x0d)
            ^ multiply(state[y * 4 + 1], 0x09)
            ^ multiply(state[y * 4 + 2], 0x0e)
            ^ multiply(state[y * 4 + 3], 0x0b);
        new_col[3] = multiply(state[y * 4], 0x0b)
            ^ multiply(state[y * 4 + 1], 0x0d)
            ^ multiply(state[y * 4 + 2], 0x09)
            ^ multiply(state[y * 4 + 3], 0x0e);
        state[y * 4..(y + 1) * 4].copy_from_slice(&new_col);
    }
}

#[cfg(test)]
mod tests {
    use crate::leakage_model::aes::{inv_mix_columns, inv_shift_rows, inv_sub_bytes};

    use super::{add_round_key, expand_key, mix_columns, shift_rows, sub_bytes};

    #[test]
    fn test_fips197_expand_key_example() {
        let key = [
            0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf,
            0x4f, 0x3c,
        ];
        let mut round_keys = [[0; 16]; 11];

        expand_key(&key, &mut round_keys);

        assert_eq!(
            round_keys,
            [
                [
                    0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09,
                    0xcf, 0x4f, 0x3c,
                ],
                [
                    0xa0, 0xfa, 0xfe, 0x17, 0x88, 0x54, 0x2c, 0xb1, 0x23, 0xa3, 0x39, 0x39, 0x2a,
                    0x6c, 0x76, 0x05,
                ],
                [
                    0xf2, 0xc2, 0x95, 0xf2, 0x7a, 0x96, 0xb9, 0x43, 0x59, 0x35, 0x80, 0x7a, 0x73,
                    0x59, 0xf6, 0x7f,
                ],
                [
                    0x3d, 0x80, 0x47, 0x7d, 0x47, 0x16, 0xfe, 0x3e, 0x1e, 0x23, 0x7e, 0x44, 0x6d,
                    0x7a, 0x88, 0x3b,
                ],
                [
                    0xef, 0x44, 0xa5, 0x41, 0xa8, 0x52, 0x5b, 0x7f, 0xb6, 0x71, 0x25, 0x3b, 0xdb,
                    0x0b, 0xad, 0x00,
                ],
                [
                    0xd4, 0xd1, 0xc6, 0xf8, 0x7c, 0x83, 0x9d, 0x87, 0xca, 0xf2, 0xb8, 0xbc, 0x11,
                    0xf9, 0x15, 0xbc,
                ],
                [
                    0x6d, 0x88, 0xa3, 0x7a, 0x11, 0x0b, 0x3e, 0xfd, 0xdb, 0xf9, 0x86, 0x41, 0xca,
                    0x00, 0x93, 0xfd,
                ],
                [
                    0x4e, 0x54, 0xf7, 0x0e, 0x5f, 0x5f, 0xc9, 0xf3, 0x84, 0xa6, 0x4f, 0xb2, 0x4e,
                    0xa6, 0xdc, 0x4f,
                ],
                [
                    0xea, 0xd2, 0x73, 0x21, 0xb5, 0x8d, 0xba, 0xd2, 0x31, 0x2b, 0xf5, 0x60, 0x7f,
                    0x8d, 0x29, 0x2f,
                ],
                [
                    0xac, 0x77, 0x66, 0xf3, 0x19, 0xfa, 0xdc, 0x21, 0x28, 0xd1, 0x29, 0x41, 0x57,
                    0x5c, 0x00, 0x6e,
                ],
                [
                    0xd0, 0x14, 0xf9, 0xa8, 0xc9, 0xee, 0x25, 0x89, 0xe1, 0x3f, 0x0c, 0xc8, 0xb6,
                    0x63, 0x0c, 0xa6,
                ],
            ]
        );
    }

    #[test]
    fn test_fips197_cipher_example() {
        let mut state = [
            0x32, 0x43, 0xf6, 0xa8, 0x88, 0x5a, 0x30, 0x8d, 0x31, 0x31, 0x98, 0xa2, 0xe0, 0x37,
            0x07, 0x34,
        ];
        let key = [
            0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf,
            0x4f, 0x3c,
        ];

        let mut round_keys = [[0; 16]; 11];
        expand_key(&key, &mut round_keys);

        let round_states = [
            (
                [
                    0x19, 0x3d, 0xe3, 0xbe, 0xa0, 0xf4, 0xe2, 0x2b, 0x9a, 0xc6, 0x8d, 0x2a, 0xe9,
                    0xf8, 0x48, 0x08,
                ],
                [
                    0xd4, 0x27, 0x11, 0xae, 0xe0, 0xbf, 0x98, 0xf1, 0xb8, 0xb4, 0x5d, 0xe5, 0x1e,
                    0x41, 0x52, 0x30,
                ],
                [
                    0xd4, 0xbf, 0x5d, 0x30, 0xe0, 0xb4, 0x52, 0xae, 0xb8, 0x41, 0x11, 0xf1, 0x1e,
                    0x27, 0x98, 0xe5,
                ],
                [
                    0x04, 0x66, 0x81, 0xe5, 0xe0, 0xcb, 0x19, 0x9a, 0x48, 0xf8, 0xd3, 0x7a, 0x28,
                    0x06, 0x26, 0x4c,
                ],
            ),
            (
                [
                    0xa4, 0x9c, 0x7f, 0xf2, 0x68, 0x9f, 0x35, 0x2b, 0x6b, 0x5b, 0xea, 0x43, 0x02,
                    0x6a, 0x50, 0x49,
                ],
                [
                    0x49, 0xde, 0xd2, 0x89, 0x45, 0xdb, 0x96, 0xf1, 0x7f, 0x39, 0x87, 0x1a, 0x77,
                    0x02, 0x53, 0x3b,
                ],
                [
                    0x49, 0xdb, 0x87, 0x3b, 0x45, 0x39, 0x53, 0x89, 0x7f, 0x02, 0xd2, 0xf1, 0x77,
                    0xde, 0x96, 0x1a,
                ],
                [
                    0x58, 0x4d, 0xca, 0xf1, 0x1b, 0x4b, 0x5a, 0xac, 0xdb, 0xe7, 0xca, 0xa8, 0x1b,
                    0x6b, 0xb0, 0xe5,
                ],
            ),
            (
                [
                    0xaa, 0x8f, 0x5f, 0x03, 0x61, 0xdd, 0xe3, 0xef, 0x82, 0xd2, 0x4a, 0xd2, 0x68,
                    0x32, 0x46, 0x9a,
                ],
                [
                    0xac, 0x73, 0xcf, 0x7b, 0xef, 0xc1, 0x11, 0xdf, 0x13, 0xb5, 0xd6, 0xb5, 0x45,
                    0x23, 0x5a, 0xb8,
                ],
                [
                    0xac, 0xc1, 0xd6, 0xb8, 0xef, 0xb5, 0x5a, 0x7b, 0x13, 0x23, 0xcf, 0xdf, 0x45,
                    0x73, 0x11, 0xb5,
                ],
                [
                    0x75, 0xec, 0x09, 0x93, 0x20, 0x0b, 0x63, 0x33, 0x53, 0xc0, 0xcf, 0x7c, 0xbb,
                    0x25, 0xd0, 0xdc,
                ],
            ),
            (
                [
                    0x48, 0x6c, 0x4e, 0xee, 0x67, 0x1d, 0x9d, 0x0d, 0x4d, 0xe3, 0xb1, 0x38, 0xd6,
                    0x5f, 0x58, 0xe7,
                ],
                [
                    0x52, 0x50, 0x2f, 0x28, 0x85, 0xa4, 0x5e, 0xd7, 0xe3, 0x11, 0xc8, 0x07, 0xf6,
                    0xcf, 0x6a, 0x94,
                ],
                [
                    0x52, 0xa4, 0xc8, 0x94, 0x85, 0x11, 0x6a, 0x28, 0xe3, 0xcf, 0x2f, 0xd7, 0xf6,
                    0x50, 0x5e, 0x07,
                ],
                [
                    0x0f, 0xd6, 0xda, 0xa9, 0x60, 0x31, 0x38, 0xbf, 0x6f, 0xc0, 0x10, 0x6b, 0x5e,
                    0xb3, 0x13, 0x01,
                ],
            ),
            (
                [
                    0xe0, 0x92, 0x7f, 0xe8, 0xc8, 0x63, 0x63, 0xc0, 0xd9, 0xb1, 0x35, 0x50, 0x85,
                    0xb8, 0xbe, 0x01,
                ],
                [
                    0xe1, 0x4f, 0xd2, 0x9b, 0xe8, 0xfb, 0xfb, 0xba, 0x35, 0xc8, 0x96, 0x53, 0x97,
                    0x6c, 0xae, 0x7c,
                ],
                [
                    0xe1, 0xfb, 0x96, 0x7c, 0xe8, 0xc8, 0xae, 0x9b, 0x35, 0x6c, 0xd2, 0xba, 0x97,
                    0x4f, 0xfb, 0x53,
                ],
                [
                    0x25, 0xd1, 0xa9, 0xad, 0xbd, 0x11, 0xd1, 0x68, 0xb6, 0x3a, 0x33, 0x8e, 0x4c,
                    0x4c, 0xc0, 0xb0,
                ],
            ),
            (
                [
                    0xf1, 0x00, 0x6f, 0x55, 0xc1, 0x92, 0x4c, 0xef, 0x7c, 0xc8, 0x8b, 0x32, 0x5d,
                    0xb5, 0xd5, 0x0c,
                ],
                [
                    0xa1, 0x63, 0xa8, 0xfc, 0x78, 0x4f, 0x29, 0xdf, 0x10, 0xe8, 0x3d, 0x23, 0x4c,
                    0xd5, 0x03, 0xfe,
                ],
                [
                    0xa1, 0x4f, 0x3d, 0xfe, 0x78, 0xe8, 0x03, 0xfc, 0x10, 0xd5, 0xa8, 0xdf, 0x4c,
                    0x63, 0x29, 0x23,
                ],
                [
                    0x4b, 0x86, 0x8d, 0x6d, 0x2c, 0x4a, 0x89, 0x80, 0x33, 0x9d, 0xf4, 0xe8, 0x37,
                    0xd2, 0x18, 0xd8,
                ],
            ),
            (
                [
                    0x26, 0x0e, 0x2e, 0x17, 0x3d, 0x41, 0xb7, 0x7d, 0xe8, 0x64, 0x72, 0xa9, 0xfd,
                    0xd2, 0x8b, 0x25,
                ],
                [
                    0xf7, 0xab, 0x31, 0xf0, 0x27, 0x83, 0xa9, 0xff, 0x9b, 0x43, 0x40, 0xd3, 0x54,
                    0xb5, 0x3d, 0x3f,
                ],
                [
                    0xf7, 0x83, 0x40, 0x3f, 0x27, 0x43, 0x3d, 0xf0, 0x9b, 0xb5, 0x31, 0xff, 0x54,
                    0xab, 0xa9, 0xd3,
                ],
                [
                    0x14, 0x15, 0xb5, 0xbf, 0x46, 0x16, 0x15, 0xec, 0x27, 0x46, 0x56, 0xd7, 0x34,
                    0x2a, 0xd8, 0x43,
                ],
            ),
            (
                [
                    0x5a, 0x41, 0x42, 0xb1, 0x19, 0x49, 0xdc, 0x1f, 0xa3, 0xe0, 0x19, 0x65, 0x7a,
                    0x8c, 0x04, 0x0c,
                ],
                [
                    0xbe, 0x83, 0x2c, 0xc8, 0xd4, 0x3b, 0x86, 0xc0, 0x0a, 0xe1, 0xd4, 0x4d, 0xda,
                    0x64, 0xf2, 0xfe,
                ],
                [
                    0xbe, 0x3b, 0xd4, 0xfe, 0xd4, 0xe1, 0xf2, 0xc8, 0x0a, 0x64, 0x2c, 0xc0, 0xda,
                    0x83, 0x86, 0x4d,
                ],
                [
                    0x00, 0x51, 0x2f, 0xd1, 0xb1, 0xc8, 0x89, 0xff, 0x54, 0x76, 0x6d, 0xcd, 0xfa,
                    0x1b, 0x99, 0xea,
                ],
            ),
            (
                [
                    0xea, 0x83, 0x5c, 0xf0, 0x04, 0x45, 0x33, 0x2d, 0x65, 0x5d, 0x98, 0xad, 0x85,
                    0x96, 0xb0, 0xc5,
                ],
                [
                    0x87, 0xec, 0x4a, 0x8c, 0xf2, 0x6e, 0xc3, 0xd8, 0x4d, 0x4c, 0x46, 0x95, 0x97,
                    0x90, 0xe7, 0xa6,
                ],
                [
                    0x87, 0x6e, 0x46, 0xa6, 0xf2, 0x4c, 0xe7, 0x8c, 0x4d, 0x90, 0x4a, 0xd8, 0x97,
                    0xec, 0xc3, 0x95,
                ],
                [
                    0x47, 0x37, 0x94, 0xed, 0x40, 0xd4, 0xe4, 0xa5, 0xa3, 0x70, 0x3a, 0xa6, 0x4c,
                    0x9f, 0x42, 0xbc,
                ],
            ),
        ];

        add_round_key(&mut state, &round_keys[0]);

        for (num_round, (start_of_round, after_sub_bytes, after_shift_rows, after_mix_columns)) in
            round_states.into_iter().enumerate()
        {
            assert_eq!(state, start_of_round);

            sub_bytes(&mut state);
            assert_eq!(state, after_sub_bytes);

            shift_rows(&mut state);
            assert_eq!(state, after_shift_rows);

            mix_columns(&mut state);
            assert_eq!(state, after_mix_columns);

            add_round_key(&mut state, &round_keys[num_round + 1]);
        }

        assert_eq!(
            state,
            [
                0xeb, 0x40, 0xf2, 0x1e, 0x59, 0x2e, 0x38, 0x84, 0x8b, 0xa1, 0x13, 0xe7, 0x1b, 0xc3,
                0x42, 0xd2,
            ]
        );

        sub_bytes(&mut state);
        assert_eq!(
            state,
            [
                0xe9, 0x09, 0x89, 0x72, 0xcb, 0x31, 0x07, 0x5f, 0x3d, 0x32, 0x7d, 0x94, 0xaf, 0x2e,
                0x2c, 0xb5,
            ]
        );

        shift_rows(&mut state);
        assert_eq!(
            state,
            [
                0xe9, 0x31, 0x7d, 0xb5, 0xcb, 0x32, 0x2c, 0x72, 0x3d, 0x2e, 0x89, 0x5f, 0xaf, 0x09,
                0x07, 0x94,
            ]
        );

        add_round_key(&mut state, &round_keys[10]);
        assert_eq!(
            state,
            [
                0x39, 0x25, 0x84, 0x1d, 0x02, 0xdc, 0x09, 0xfb, 0xdc, 0x11, 0x85, 0x97, 0x19, 0x6a,
                0x0b, 0x32,
            ]
        );
    }

    #[test]
    fn test_fips197_decipher_example() {
        let mut state = [
            0x39, 0x25, 0x84, 0x1d, 0x02, 0xdc, 0x09, 0xfb, 0xdc, 0x11, 0x85, 0x97, 0x19, 0x6a,
            0x0b, 0x32,
        ];
        let key = [
            0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf,
            0x4f, 0x3c,
        ];

        let mut round_keys = [[0; 16]; 11];
        expand_key(&key, &mut round_keys);

        let round_states = [
            (
                [
                    0xe9, 0x31, 0x7d, 0xb5, 0xcb, 0x32, 0x2c, 0x72, 0x3d, 0x2e, 0x89, 0x5f, 0xaf,
                    0x09, 0x07, 0x94,
                ],
                [
                    0xe9, 0x09, 0x89, 0x72, 0xcb, 0x31, 0x07, 0x5f, 0x3d, 0x32, 0x7d, 0x94, 0xaf,
                    0x2e, 0x2c, 0xb5,
                ],
                [
                    0xeb, 0x40, 0xf2, 0x1e, 0x59, 0x2e, 0x38, 0x84, 0x8b, 0xa1, 0x13, 0xe7, 0x1b,
                    0xc3, 0x42, 0xd2,
                ],
                [
                    0x47, 0x37, 0x94, 0xed, 0x40, 0xd4, 0xe4, 0xa5, 0xa3, 0x70, 0x3a, 0xa6, 0x4c,
                    0x9f, 0x42, 0xbc,
                ],
            ),
            (
                [
                    0x87, 0x6e, 0x46, 0xa6, 0xf2, 0x4c, 0xe7, 0x8c, 0x4d, 0x90, 0x4a, 0xd8, 0x97,
                    0xec, 0xc3, 0x95,
                ],
                [
                    0x87, 0xec, 0x4a, 0x8c, 0xf2, 0x6e, 0xc3, 0xd8, 0x4d, 0x4c, 0x46, 0x95, 0x97,
                    0x90, 0xe7, 0xa6,
                ],
                [
                    0xea, 0x83, 0x5c, 0xf0, 0x04, 0x45, 0x33, 0x2d, 0x65, 0x5d, 0x98, 0xad, 0x85,
                    0x96, 0xb0, 0xc5,
                ],
                [
                    0x00, 0x51, 0x2f, 0xd1, 0xb1, 0xc8, 0x89, 0xff, 0x54, 0x76, 0x6d, 0xcd, 0xfa,
                    0x1b, 0x99, 0xea,
                ],
            ),
            (
                [
                    0xbe, 0x3b, 0xd4, 0xfe, 0xd4, 0xe1, 0xf2, 0xc8, 0x0a, 0x64, 0x2c, 0xc0, 0xda,
                    0x83, 0x86, 0x4d,
                ],
                [
                    0xbe, 0x83, 0x2c, 0xc8, 0xd4, 0x3b, 0x86, 0xc0, 0x0a, 0xe1, 0xd4, 0x4d, 0xda,
                    0x64, 0xf2, 0xfe,
                ],
                [
                    0x5a, 0x41, 0x42, 0xb1, 0x19, 0x49, 0xdc, 0x1f, 0xa3, 0xe0, 0x19, 0x65, 0x7a,
                    0x8c, 0x04, 0x0c,
                ],
                [
                    0x14, 0x15, 0xb5, 0xbf, 0x46, 0x16, 0x15, 0xec, 0x27, 0x46, 0x56, 0xd7, 0x34,
                    0x2a, 0xd8, 0x43,
                ],
            ),
            (
                [
                    0xf7, 0x83, 0x40, 0x3f, 0x27, 0x43, 0x3d, 0xf0, 0x9b, 0xb5, 0x31, 0xff, 0x54,
                    0xab, 0xa9, 0xd3,
                ],
                [
                    0xf7, 0xab, 0x31, 0xf0, 0x27, 0x83, 0xa9, 0xff, 0x9b, 0x43, 0x40, 0xd3, 0x54,
                    0xb5, 0x3d, 0x3f,
                ],
                [
                    0x26, 0x0e, 0x2e, 0x17, 0x3d, 0x41, 0xb7, 0x7d, 0xe8, 0x64, 0x72, 0xa9, 0xfd,
                    0xd2, 0x8b, 0x25,
                ],
                [
                    0x4b, 0x86, 0x8d, 0x6d, 0x2c, 0x4a, 0x89, 0x80, 0x33, 0x9d, 0xf4, 0xe8, 0x37,
                    0xd2, 0x18, 0xd8,
                ],
            ),
            (
                [
                    0xa1, 0x4f, 0x3d, 0xfe, 0x78, 0xe8, 0x03, 0xfc, 0x10, 0xd5, 0xa8, 0xdf, 0x4c,
                    0x63, 0x29, 0x23,
                ],
                [
                    0xa1, 0x63, 0xa8, 0xfc, 0x78, 0x4f, 0x29, 0xdf, 0x10, 0xe8, 0x3d, 0x23, 0x4c,
                    0xd5, 0x03, 0xfe,
                ],
                [
                    0xf1, 0x00, 0x6f, 0x55, 0xc1, 0x92, 0x4c, 0xef, 0x7c, 0xc8, 0x8b, 0x32, 0x5d,
                    0xb5, 0xd5, 0x0c,
                ],
                [
                    0x25, 0xd1, 0xa9, 0xad, 0xbd, 0x11, 0xd1, 0x68, 0xb6, 0x3a, 0x33, 0x8e, 0x4c,
                    0x4c, 0xc0, 0xb0,
                ],
            ),
            (
                [
                    0xe1, 0xfb, 0x96, 0x7c, 0xe8, 0xc8, 0xae, 0x9b, 0x35, 0x6c, 0xd2, 0xba, 0x97,
                    0x4f, 0xfb, 0x53,
                ],
                [
                    0xe1, 0x4f, 0xd2, 0x9b, 0xe8, 0xfb, 0xfb, 0xba, 0x35, 0xc8, 0x96, 0x53, 0x97,
                    0x6c, 0xae, 0x7c,
                ],
                [
                    0xe0, 0x92, 0x7f, 0xe8, 0xc8, 0x63, 0x63, 0xc0, 0xd9, 0xb1, 0x35, 0x50, 0x85,
                    0xb8, 0xbe, 0x01,
                ],
                [
                    0x0f, 0xd6, 0xda, 0xa9, 0x60, 0x31, 0x38, 0xbf, 0x6f, 0xc0, 0x10, 0x6b, 0x5e,
                    0xb3, 0x13, 0x01,
                ],
            ),
            (
                [
                    0x52, 0xa4, 0xc8, 0x94, 0x85, 0x11, 0x6a, 0x28, 0xe3, 0xcf, 0x2f, 0xd7, 0xf6,
                    0x50, 0x5e, 0x07,
                ],
                [
                    0x52, 0x50, 0x2f, 0x28, 0x85, 0xa4, 0x5e, 0xd7, 0xe3, 0x11, 0xc8, 0x07, 0xf6,
                    0xcf, 0x6a, 0x94,
                ],
                [
                    0x48, 0x6c, 0x4e, 0xee, 0x67, 0x1d, 0x9d, 0x0d, 0x4d, 0xe3, 0xb1, 0x38, 0xd6,
                    0x5f, 0x58, 0xe7,
                ],
                [
                    0x75, 0xec, 0x09, 0x93, 0x20, 0x0b, 0x63, 0x33, 0x53, 0xc0, 0xcf, 0x7c, 0xbb,
                    0x25, 0xd0, 0xdc,
                ],
            ),
            (
                [
                    0xac, 0xc1, 0xd6, 0xb8, 0xef, 0xb5, 0x5a, 0x7b, 0x13, 0x23, 0xcf, 0xdf, 0x45,
                    0x73, 0x11, 0xb5,
                ],
                [
                    0xac, 0x73, 0xcf, 0x7b, 0xef, 0xc1, 0x11, 0xdf, 0x13, 0xb5, 0xd6, 0xb5, 0x45,
                    0x23, 0x5a, 0xb8,
                ],
                [
                    0xaa, 0x8f, 0x5f, 0x03, 0x61, 0xdd, 0xe3, 0xef, 0x82, 0xd2, 0x4a, 0xd2, 0x68,
                    0x32, 0x46, 0x9a,
                ],
                [
                    0x58, 0x4d, 0xca, 0xf1, 0x1b, 0x4b, 0x5a, 0xac, 0xdb, 0xe7, 0xca, 0xa8, 0x1b,
                    0x6b, 0xb0, 0xe5,
                ],
            ),
            (
                [
                    0x49, 0xdb, 0x87, 0x3b, 0x45, 0x39, 0x53, 0x89, 0x7f, 0x02, 0xd2, 0xf1, 0x77,
                    0xde, 0x96, 0x1a,
                ],
                [
                    0x49, 0xde, 0xd2, 0x89, 0x45, 0xdb, 0x96, 0xf1, 0x7f, 0x39, 0x87, 0x1a, 0x77,
                    0x02, 0x53, 0x3b,
                ],
                [
                    0xa4, 0x9c, 0x7f, 0xf2, 0x68, 0x9f, 0x35, 0x2b, 0x6b, 0x5b, 0xea, 0x43, 0x02,
                    0x6a, 0x50, 0x49,
                ],
                [
                    0x04, 0x66, 0x81, 0xe5, 0xe0, 0xcb, 0x19, 0x9a, 0x48, 0xf8, 0xd3, 0x7a, 0x28,
                    0x06, 0x26, 0x4c,
                ],
            ),
        ];

        add_round_key(&mut state, &round_keys[10]);
        for (
            num_round,
            (start_of_round, after_inv_shift_rows, after_inv_sub_bytes, after_add_round_key),
        ) in round_states.into_iter().enumerate()
        {
            assert_eq!(state, start_of_round);

            inv_shift_rows(&mut state);
            assert_eq!(state, after_inv_shift_rows);

            inv_sub_bytes(&mut state);
            assert_eq!(state, after_inv_sub_bytes);

            add_round_key(&mut state, &round_keys[9 - num_round]);
            assert_eq!(state, after_add_round_key);

            inv_mix_columns(&mut state);
        }

        assert_eq!(
            state,
            [
                0xd4, 0xbf, 0x5d, 0x30, 0xe0, 0xb4, 0x52, 0xae, 0xb8, 0x41, 0x11, 0xf1, 0x1e, 0x27,
                0x98, 0xe5,
            ]
        );

        inv_shift_rows(&mut state);
        assert_eq!(
            state,
            [
                0xd4, 0x27, 0x11, 0xae, 0xe0, 0xbf, 0x98, 0xf1, 0xb8, 0xb4, 0x5d, 0xe5, 0x1e, 0x41,
                0x52, 0x30,
            ]
        );

        inv_sub_bytes(&mut state);
        assert_eq!(
            state,
            [
                0x19, 0x3d, 0xe3, 0xbe, 0xa0, 0xf4, 0xe2, 0x2b, 0x9a, 0xc6, 0x8d, 0x2a, 0xe9, 0xf8,
                0x48, 0x08,
            ],
        );

        add_round_key(&mut state, &round_keys[0]);
        assert_eq!(
            state,
            [
                0x32, 0x43, 0xf6, 0xa8, 0x88, 0x5a, 0x30, 0x8d, 0x31, 0x31, 0x98, 0xa2, 0xe0, 0x37,
                0x07, 0x34,
            ]
        );
    }
}
